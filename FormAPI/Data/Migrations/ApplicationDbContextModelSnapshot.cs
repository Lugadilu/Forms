// <auto-generated />
using System;
using FormAPI.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Newtonsoft.Json;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FormAPI.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FormAPI.Models.Form", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("forms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("909f3db4-f61e-4fed-a1cd-b93d05cf1341"),
                            Description = "A form to collect customer feedback.",
                            Name = "Customer Feedback Form"
                        },
                        new
                        {
                            Id = new Guid("8a6c19d3-59b7-4e1f-bb08-3942db2226d7"),
                            Description = "A survey to collect employee opinions.",
                            Name = "Employee Survey"
                        });
                });

            modelBuilder.Entity("FormAPI.Models.FormField", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Attributes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FieldType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Kind")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PageId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Required")
                        .HasColumnType("boolean");

                    b.Property<string>("Rules")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PageId");

                    b.ToTable("formfields");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0147cdb1-e997-41a7-87c3-5cff34d7a8b9"),
                            Attributes = "{}",
                            FieldType = "firstName",
                            Kind = "profile",
                            Name = "profileFirstName",
                            PageId = new Guid("91da9b52-cb82-49d2-8373-027e813f5740"),
                            Required = false,
                            Rules = "{\"minLength\": 2, \"maxLength\": 128}"
                        },
                        new
                        {
                            Id = new Guid("92b5dce4-c941-4c21-86b1-4435142bc480"),
                            Attributes = "{}",
                            FieldType = "lastName",
                            Kind = "profile",
                            Name = "profileLastName",
                            PageId = new Guid("6c85514a-7ab5-4a99-ac20-4776d0668aed"),
                            Required = false,
                            Rules = "{\"minLength\": 2, \"maxLength\": 128}"
                        });
                });

            modelBuilder.Entity("FormAPI.Models.FormRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FormFieldValues")
                        .IsRequired()
                        .HasColumnType("text");

                    /*
                    // Apply conversion for FormFieldValues
                    b.Property<Dictionary<string, string>>("FormFieldValues")
                        .IsRequired()
                        .HasColumnType("jsonb") // Or "text" if you want to store as a JSON string
                        .HasConversion(
                            v => JsonConvert.SerializeObject(v), // Convert dictionary to JSON string for storage
                            v => JsonConvert.DeserializeObject<Dictionary<string, string>>(v)); // Convert JSON string back to dictionary
                    */
                    b.Property<Guid>("FormId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.ToTable("formrecords");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8ef9d581-4bf2-4c9d-ae1f-b592db155a50"),
                            CreatedAt = new DateTime(2024, 8, 1, 19, 19, 18, 882, DateTimeKind.Utc).AddTicks(9302),
                            FormFieldValues = "{\"firstName\": \"Michelle\", \"lastName\": \"Smith\"}",
                            FormId = new Guid("909f3db4-f61e-4fed-a1cd-b93d05cf1341")
                        },
                        new
                        {
                            Id = new Guid("4c988889-813a-4723-8407-45717fb8c82d"),
                            CreatedAt = new DateTime(2024, 8, 1, 19, 19, 18, 882, DateTimeKind.Utc).AddTicks(9305),
                            FormFieldValues = "{\"firstName\": \"Yael\", \"lastName\": \"Doe\"}",
                            FormId = new Guid("8a6c19d3-59b7-4e1f-bb08-3942db2226d7")
                        });
                });

            modelBuilder.Entity("FormAPI.Models.Page", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("FormId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.ToTable("pages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("91da9b52-cb82-49d2-8373-027e813f5740"),
                            FormId = new Guid("909f3db4-f61e-4fed-a1cd-b93d05cf1341")
                        },
                        new
                        {
                            Id = new Guid("6c85514a-7ab5-4a99-ac20-4776d0668aed"),
                            FormId = new Guid("8a6c19d3-59b7-4e1f-bb08-3942db2226d7")
                        });
                });

            modelBuilder.Entity("FormAPI.Models.FormField", b =>
                {
                    b.HasOne("FormAPI.Models.Page", "Page")
                        .WithMany("FormFields")
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Page");
                });

            modelBuilder.Entity("FormAPI.Models.FormRecord", b =>
                {
                    b.HasOne("FormAPI.Models.Form", "Form")
                        .WithMany("FormRecords")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Form");
                });

            modelBuilder.Entity("FormAPI.Models.Page", b =>
                {
                    b.HasOne("FormAPI.Models.Form", "Form")
                        .WithMany("Pages")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Form");
                });

            modelBuilder.Entity("FormAPI.Models.Form", b =>
                {
                    b.Navigation("FormRecords");

                    b.Navigation("Pages");
                });

            modelBuilder.Entity("FormAPI.Models.Page", b =>
                {
                    b.Navigation("FormFields");
                });
#pragma warning restore 612, 618
        }
    }
}
